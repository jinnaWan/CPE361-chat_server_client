/*
 * This source file was generated by the Gradle 'init' task
 */


import java.io.IOException;

import chat.ClientThread;
import chat.ServerThread;
import threadnetwork.WebSocketClient;
import threadnetwork.WebSocketServer;

public class App {
    private static final int PORT = 8080;
    private static final int CHAT_PORT = 12345;
    
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        if (args.length > 0 && args[0].equalsIgnoreCase("server")) {
            startServer();
        } else if (args.length > 0 && args[0].equalsIgnoreCase("client")) {
            startClient();
        } else if (args.length > 0 && args[0].equalsIgnoreCase("chat-server")) {
            startChatServer();
        } else if (args.length > 0 && args[0].equalsIgnoreCase("chat-client")) {
            startChatClient();
        } else {
            System.out.println("Available commands:");
            System.out.println("  server        - Start basic WebSocket server");
            System.out.println("  client        - Start basic WebSocket client");
            System.out.println("  chat-server   - Start PA10 Chat server (console-based)");
            System.out.println("  chat-client   - Start PA10 Chat client (console-based)");
            System.out.println();
            System.out.println("Examples:");
            System.out.println("  java -jar ChatApp.jar chat-server");
            System.out.println("  java -jar ChatApp.jar chat-client");
        }
    }
    
    private static void startChatServer() {
        System.out.println("Starting PA10 Chat Server (lecture-style)...");
        try {
            ServerThread server = new ServerThread(CHAT_PORT);
            server.start();
            server.join(); // Wait for server to complete
        } catch (Exception e) {
            System.err.println("Failed to start chat server: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private static void startChatClient() {
        System.out.println("Starting PA10 Chat Client (console-based)...");
        try {
            ClientThread client = new ClientThread("localhost", CHAT_PORT);
            client.start();
            client.join(); // Wait for client to complete
        } catch (Exception e) {
            System.err.println("Failed to start chat client: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private static void startServer() {
        System.out.println("Starting WebSocket server...");
        WebSocketServer server = new WebSocketServer(PORT);
        
        // Set timeout to 5 minutes
        server.setTimeout(300000);
        
        // Start the server
        server.startServer();
        
        // Keep main thread alive
        try {
            System.out.println("Press Ctrl+C to stop the server");
            Thread.sleep(Long.MAX_VALUE);
        } catch (InterruptedException e) {
            System.out.println("Server interrupted");
        } finally {
            server.stopServer();
        }
    }
    
    private static void startClient() {
        System.out.println("Starting WebSocket client...");
        WebSocketClient client = new WebSocketClient("localhost", PORT, "/websocket");
        
        // Add message handler
        client.setMessageHandler(new WebSocketClient.MessageHandler() {
            @Override
            public void onMessage(String message) {
                System.out.println("Received: " + message);
            }
            
            @Override
            public void onClose() {
                System.out.println("Connection closed");
            }
            
            @Override
            public void onError(Exception ex) {
                System.err.println("Error: " + ex.getMessage());
            }
        });
        
        // Connect to server
        client.connect();
        
        if (client.isConnected()) {
            // Send some messages
            try {
                client.sendMessage("Hello WebSocket Server!");
                Thread.sleep(1000);
                client.sendMessage("This is a test message");
                Thread.sleep(1000);
                client.sendMessage("Goodbye!");
                Thread.sleep(1000);
            } catch (IOException | InterruptedException e) {
                System.err.println("Error sending message: " + e.getMessage());
            } finally {
                // Close the connection
                client.close();
            }
        } else {
            System.err.println("Failed to connect to server");
        }
    }
}
